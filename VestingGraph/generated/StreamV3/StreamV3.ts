// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AllocateTokenId extends ethereum.Event {
  get params(): AllocateTokenId__Params {
    return new AllocateTokenId__Params(this);
  }
}

export class AllocateTokenId__Params {
  _event: AllocateTokenId;

  constructor(event: AllocateTokenId) {
    this._event = event;
  }

  get streamId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get startIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get allocateSize(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get nftShare(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class CreateStream extends ethereum.Event {
  get params(): CreateStream__Params {
    return new CreateStream__Params(this);
  }
}

export class CreateStream__Params {
  _event: CreateStream;

  constructor(event: CreateStream) {
    this._event = event;
  }

  get streamId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get startTime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get stopTime(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get erc721Address(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class RevokeAllocation extends ethereum.Event {
  get params(): RevokeAllocation__Params {
    return new RevokeAllocation__Params(this);
  }
}

export class RevokeAllocation__Params {
  _event: RevokeAllocation;

  constructor(event: RevokeAllocation) {
    this._event = event;
  }

  get streamId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get startIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get revokeAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SenderWithdraw extends ethereum.Event {
  get params(): SenderWithdraw__Params {
    return new SenderWithdraw__Params(this);
  }
}

export class SenderWithdraw__Params {
  _event: SenderWithdraw;

  constructor(event: SenderWithdraw) {
    this._event = event;
  }

  get streamId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class WithdrawAllFromStream extends ethereum.Event {
  get params(): WithdrawAllFromStream__Params {
    return new WithdrawAllFromStream__Params(this);
  }
}

export class WithdrawAllFromStream__Params {
  _event: WithdrawAllFromStream;

  constructor(event: WithdrawAllFromStream) {
    this._event = event;
  }

  get streamId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class WithdrawFromStreamByTokenId extends ethereum.Event {
  get params(): WithdrawFromStreamByTokenId__Params {
    return new WithdrawFromStreamByTokenId__Params(this);
  }
}

export class WithdrawFromStreamByTokenId__Params {
  _event: WithdrawFromStreamByTokenId;

  constructor(event: WithdrawFromStreamByTokenId) {
    this._event = event;
  }

  get streamId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class StreamV3__getAllocationInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class StreamV3__getStreamInfoResult {
  value0: Address;
  value1: BigInt;
  value2: Address;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: Address,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class StreamV3 extends ethereum.SmartContract {
  static bind(address: Address): StreamV3 {
    return new StreamV3("StreamV3", address);
  }

  addNewEdition(
    streamId: BigInt,
    deposit: BigInt,
    _uint256ArgsAllocateAmount: Array<BigInt>,
    _uint256ArgsNFTShares: Array<BigInt>
  ): boolean {
    let result = super.call(
      "addNewEdition",
      "addNewEdition(uint256,uint256,uint256[],uint256[]):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(streamId),
        ethereum.Value.fromUnsignedBigInt(deposit),
        ethereum.Value.fromUnsignedBigIntArray(_uint256ArgsAllocateAmount),
        ethereum.Value.fromUnsignedBigIntArray(_uint256ArgsNFTShares)
      ]
    );

    return result[0].toBoolean();
  }

  try_addNewEdition(
    streamId: BigInt,
    deposit: BigInt,
    _uint256ArgsAllocateAmount: Array<BigInt>,
    _uint256ArgsNFTShares: Array<BigInt>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "addNewEdition",
      "addNewEdition(uint256,uint256,uint256[],uint256[]):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(streamId),
        ethereum.Value.fromUnsignedBigInt(deposit),
        ethereum.Value.fromUnsignedBigIntArray(_uint256ArgsAllocateAmount),
        ethereum.Value.fromUnsignedBigIntArray(_uint256ArgsNFTShares)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  availableBalanceForTokenId(streamId: BigInt, tokenId: BigInt): BigInt {
    let result = super.call(
      "availableBalanceForTokenId",
      "availableBalanceForTokenId(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(streamId),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return result[0].toBigInt();
  }

  try_availableBalanceForTokenId(
    streamId: BigInt,
    tokenId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "availableBalanceForTokenId",
      "availableBalanceForTokenId(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(streamId),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkIfRevoked(streamId: BigInt, tokenId: BigInt): boolean {
    let result = super.call(
      "checkIfRevoked",
      "checkIfRevoked(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(streamId),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return result[0].toBoolean();
  }

  try_checkIfRevoked(
    streamId: BigInt,
    tokenId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkIfRevoked",
      "checkIfRevoked(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(streamId),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  createStream(
    _uintArgs: Array<BigInt>,
    tokenAddress: Address,
    _uint256ArgsAllocateAmount: Array<BigInt>,
    _uint256ArgsNFTShares: Array<BigInt>
  ): BigInt {
    let result = super.call(
      "createStream",
      "createStream(uint256[3],address,uint256[],uint256[]):(uint256)",
      [
        ethereum.Value.fromUnsignedBigIntArray(_uintArgs),
        ethereum.Value.fromAddress(tokenAddress),
        ethereum.Value.fromUnsignedBigIntArray(_uint256ArgsAllocateAmount),
        ethereum.Value.fromUnsignedBigIntArray(_uint256ArgsNFTShares)
      ]
    );

    return result[0].toBigInt();
  }

  try_createStream(
    _uintArgs: Array<BigInt>,
    tokenAddress: Address,
    _uint256ArgsAllocateAmount: Array<BigInt>,
    _uint256ArgsNFTShares: Array<BigInt>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createStream",
      "createStream(uint256[3],address,uint256[],uint256[]):(uint256)",
      [
        ethereum.Value.fromUnsignedBigIntArray(_uintArgs),
        ethereum.Value.fromAddress(tokenAddress),
        ethereum.Value.fromUnsignedBigIntArray(_uint256ArgsAllocateAmount),
        ethereum.Value.fromUnsignedBigIntArray(_uint256ArgsNFTShares)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  deltaOf(streamId: BigInt): BigInt {
    let result = super.call("deltaOf", "deltaOf(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(streamId)
    ]);

    return result[0].toBigInt();
  }

  try_deltaOf(streamId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("deltaOf", "deltaOf(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(streamId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  erc721Address(): Address {
    let result = super.call("erc721Address", "erc721Address():(address)", []);

    return result[0].toAddress();
  }

  try_erc721Address(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "erc721Address",
      "erc721Address():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAllAllocations(streamId: BigInt): Array<BigInt> {
    let result = super.call(
      "getAllAllocations",
      "getAllAllocations(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(streamId)]
    );

    return result[0].toBigIntArray();
  }

  try_getAllAllocations(streamId: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getAllAllocations",
      "getAllAllocations(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(streamId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAllocationInfo(
    streamId: BigInt,
    startIndex: BigInt
  ): StreamV3__getAllocationInfoResult {
    let result = super.call(
      "getAllocationInfo",
      "getAllocationInfo(uint256,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(streamId),
        ethereum.Value.fromUnsignedBigInt(startIndex)
      ]
    );

    return new StreamV3__getAllocationInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getAllocationInfo(
    streamId: BigInt,
    startIndex: BigInt
  ): ethereum.CallResult<StreamV3__getAllocationInfoResult> {
    let result = super.tryCall(
      "getAllocationInfo",
      "getAllocationInfo(uint256,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(streamId),
        ethereum.Value.fromUnsignedBigInt(startIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StreamV3__getAllocationInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getStreamInfo(streamId: BigInt): StreamV3__getStreamInfoResult {
    let result = super.call(
      "getStreamInfo",
      "getStreamInfo(uint256):(address,uint256,address,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(streamId)]
    );

    return new StreamV3__getStreamInfoResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_getStreamInfo(
    streamId: BigInt
  ): ethereum.CallResult<StreamV3__getStreamInfoResult> {
    let result = super.tryCall(
      "getStreamInfo",
      "getStreamInfo(uint256):(address,uint256,address,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(streamId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StreamV3__getStreamInfoResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  lastAllocation(): BigInt {
    let result = super.call("lastAllocation", "lastAllocation():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastAllocation(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastAllocation",
      "lastAllocation():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nextStreamId(): BigInt {
    let result = super.call("nextStreamId", "nextStreamId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nextStreamId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nextStreamId", "nextStreamId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  remainingBalanceByTokenId(streamId: BigInt, tokenId: BigInt): BigInt {
    let result = super.call(
      "remainingBalanceByTokenId",
      "remainingBalanceByTokenId(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(streamId),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return result[0].toBigInt();
  }

  try_remainingBalanceByTokenId(
    streamId: BigInt,
    tokenId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "remainingBalanceByTokenId",
      "remainingBalanceByTokenId(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(streamId),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  revokeStream(
    streamId: BigInt,
    startIndex: BigInt,
    revokeAmount: BigInt
  ): boolean {
    let result = super.call(
      "revokeStream",
      "revokeStream(uint256,uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(streamId),
        ethereum.Value.fromUnsignedBigInt(startIndex),
        ethereum.Value.fromUnsignedBigInt(revokeAmount)
      ]
    );

    return result[0].toBoolean();
  }

  try_revokeStream(
    streamId: BigInt,
    startIndex: BigInt,
    revokeAmount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "revokeStream",
      "revokeStream(uint256,uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(streamId),
        ethereum.Value.fromUnsignedBigInt(startIndex),
        ethereum.Value.fromUnsignedBigInt(revokeAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  senderWithdrawFromStream(streamId: BigInt): boolean {
    let result = super.call(
      "senderWithdrawFromStream",
      "senderWithdrawFromStream(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(streamId)]
    );

    return result[0].toBoolean();
  }

  try_senderWithdrawFromStream(streamId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "senderWithdrawFromStream",
      "senderWithdrawFromStream(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(streamId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  withdrawAllFromStream(streamId: BigInt, tokenIds: Array<BigInt>): boolean {
    let result = super.call(
      "withdrawAllFromStream",
      "withdrawAllFromStream(uint256,uint256[]):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(streamId),
        ethereum.Value.fromUnsignedBigIntArray(tokenIds)
      ]
    );

    return result[0].toBoolean();
  }

  try_withdrawAllFromStream(
    streamId: BigInt,
    tokenIds: Array<BigInt>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "withdrawAllFromStream",
      "withdrawAllFromStream(uint256,uint256[]):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(streamId),
        ethereum.Value.fromUnsignedBigIntArray(tokenIds)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  withdrawFromStreamByTokenId(streamId: BigInt, tokenId: BigInt): boolean {
    let result = super.call(
      "withdrawFromStreamByTokenId",
      "withdrawFromStreamByTokenId(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(streamId),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return result[0].toBoolean();
  }

  try_withdrawFromStreamByTokenId(
    streamId: BigInt,
    tokenId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "withdrawFromStreamByTokenId",
      "withdrawFromStreamByTokenId(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(streamId),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _erc721Addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddNewEditionCall extends ethereum.Call {
  get inputs(): AddNewEditionCall__Inputs {
    return new AddNewEditionCall__Inputs(this);
  }

  get outputs(): AddNewEditionCall__Outputs {
    return new AddNewEditionCall__Outputs(this);
  }
}

export class AddNewEditionCall__Inputs {
  _call: AddNewEditionCall;

  constructor(call: AddNewEditionCall) {
    this._call = call;
  }

  get streamId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get deposit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _uint256ArgsAllocateAmount(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _uint256ArgsNFTShares(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class AddNewEditionCall__Outputs {
  _call: AddNewEditionCall;

  constructor(call: AddNewEditionCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CreateStreamCall extends ethereum.Call {
  get inputs(): CreateStreamCall__Inputs {
    return new CreateStreamCall__Inputs(this);
  }

  get outputs(): CreateStreamCall__Outputs {
    return new CreateStreamCall__Outputs(this);
  }
}

export class CreateStreamCall__Inputs {
  _call: CreateStreamCall;

  constructor(call: CreateStreamCall) {
    this._call = call;
  }

  get _uintArgs(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get tokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _uint256ArgsAllocateAmount(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _uint256ArgsNFTShares(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class CreateStreamCall__Outputs {
  _call: CreateStreamCall;

  constructor(call: CreateStreamCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RevokeStreamCall extends ethereum.Call {
  get inputs(): RevokeStreamCall__Inputs {
    return new RevokeStreamCall__Inputs(this);
  }

  get outputs(): RevokeStreamCall__Outputs {
    return new RevokeStreamCall__Outputs(this);
  }
}

export class RevokeStreamCall__Inputs {
  _call: RevokeStreamCall;

  constructor(call: RevokeStreamCall) {
    this._call = call;
  }

  get streamId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get startIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get revokeAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RevokeStreamCall__Outputs {
  _call: RevokeStreamCall;

  constructor(call: RevokeStreamCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SenderWithdrawFromStreamCall extends ethereum.Call {
  get inputs(): SenderWithdrawFromStreamCall__Inputs {
    return new SenderWithdrawFromStreamCall__Inputs(this);
  }

  get outputs(): SenderWithdrawFromStreamCall__Outputs {
    return new SenderWithdrawFromStreamCall__Outputs(this);
  }
}

export class SenderWithdrawFromStreamCall__Inputs {
  _call: SenderWithdrawFromStreamCall;

  constructor(call: SenderWithdrawFromStreamCall) {
    this._call = call;
  }

  get streamId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SenderWithdrawFromStreamCall__Outputs {
  _call: SenderWithdrawFromStreamCall;

  constructor(call: SenderWithdrawFromStreamCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class WithdrawAllFromStreamCall extends ethereum.Call {
  get inputs(): WithdrawAllFromStreamCall__Inputs {
    return new WithdrawAllFromStreamCall__Inputs(this);
  }

  get outputs(): WithdrawAllFromStreamCall__Outputs {
    return new WithdrawAllFromStreamCall__Outputs(this);
  }
}

export class WithdrawAllFromStreamCall__Inputs {
  _call: WithdrawAllFromStreamCall;

  constructor(call: WithdrawAllFromStreamCall) {
    this._call = call;
  }

  get streamId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tokenIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class WithdrawAllFromStreamCall__Outputs {
  _call: WithdrawAllFromStreamCall;

  constructor(call: WithdrawAllFromStreamCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class WithdrawFromStreamByTokenIdCall extends ethereum.Call {
  get inputs(): WithdrawFromStreamByTokenIdCall__Inputs {
    return new WithdrawFromStreamByTokenIdCall__Inputs(this);
  }

  get outputs(): WithdrawFromStreamByTokenIdCall__Outputs {
    return new WithdrawFromStreamByTokenIdCall__Outputs(this);
  }
}

export class WithdrawFromStreamByTokenIdCall__Inputs {
  _call: WithdrawFromStreamByTokenIdCall;

  constructor(call: WithdrawFromStreamByTokenIdCall) {
    this._call = call;
  }

  get streamId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawFromStreamByTokenIdCall__Outputs {
  _call: WithdrawFromStreamByTokenIdCall;

  constructor(call: WithdrawFromStreamByTokenIdCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
