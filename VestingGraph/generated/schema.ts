// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class AllocationsEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
    this.set("streamId", Value.fromBigInt(BigInt.zero()));
    this.set("startIndex", Value.fromBigInt(BigInt.zero()));
    this.set("allocateSize", Value.fromBigInt(BigInt.zero()));
    this.set("nftShare", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AllocationsEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AllocationsEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AllocationsEntity", id.toString(), this);
    }
  }

  static load(id: string): AllocationsEntity | null {
    return changetype<AllocationsEntity | null>(
      store.get("AllocationsEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get streamId(): BigInt {
    let value = this.get("streamId");
    return value!.toBigInt();
  }

  set streamId(value: BigInt) {
    this.set("streamId", Value.fromBigInt(value));
  }

  get startIndex(): BigInt {
    let value = this.get("startIndex");
    return value!.toBigInt();
  }

  set startIndex(value: BigInt) {
    this.set("startIndex", Value.fromBigInt(value));
  }

  get allocateSize(): BigInt {
    let value = this.get("allocateSize");
    return value!.toBigInt();
  }

  set allocateSize(value: BigInt) {
    this.set("allocateSize", Value.fromBigInt(value));
  }

  get nftShare(): BigInt {
    let value = this.get("nftShare");
    return value!.toBigInt();
  }

  set nftShare(value: BigInt) {
    this.set("nftShare", Value.fromBigInt(value));
  }
}

export class RevokedAllocationsEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
    this.set("streamId", Value.fromBigInt(BigInt.zero()));
    this.set("startIndex", Value.fromBigInt(BigInt.zero()));
    this.set("revokeAmount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save RevokedAllocationsEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save RevokedAllocationsEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("RevokedAllocationsEntity", id.toString(), this);
    }
  }

  static load(id: string): RevokedAllocationsEntity | null {
    return changetype<RevokedAllocationsEntity | null>(
      store.get("RevokedAllocationsEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get streamId(): BigInt {
    let value = this.get("streamId");
    return value!.toBigInt();
  }

  set streamId(value: BigInt) {
    this.set("streamId", Value.fromBigInt(value));
  }

  get startIndex(): BigInt {
    let value = this.get("startIndex");
    return value!.toBigInt();
  }

  set startIndex(value: BigInt) {
    this.set("startIndex", Value.fromBigInt(value));
  }

  get revokeAmount(): BigInt {
    let value = this.get("revokeAmount");
    return value!.toBigInt();
  }

  set revokeAmount(value: BigInt) {
    this.set("revokeAmount", Value.fromBigInt(value));
  }
}

export class StreamEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
    this.set("streamId", Value.fromBigInt(BigInt.zero()));
    this.set("startIndex", Value.fromBigInt(BigInt.zero()));
    this.set("startTime", Value.fromBigInt(BigInt.zero()));
    this.set("stopTime", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StreamEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save StreamEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("StreamEntity", id.toString(), this);
    }
  }

  static load(id: string): StreamEntity | null {
    return changetype<StreamEntity | null>(store.get("StreamEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get streamId(): BigInt {
    let value = this.get("streamId");
    return value!.toBigInt();
  }

  set streamId(value: BigInt) {
    this.set("streamId", Value.fromBigInt(value));
  }

  get startIndex(): BigInt {
    let value = this.get("startIndex");
    return value!.toBigInt();
  }

  set startIndex(value: BigInt) {
    this.set("startIndex", Value.fromBigInt(value));
  }

  get sender(): string | null {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set sender(value: string | null) {
    if (!value) {
      this.unset("sender");
    } else {
      this.set("sender", Value.fromString(<string>value));
    }
  }

  get tokenAddress(): Bytes | null {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes | null) {
    if (!value) {
      this.unset("tokenAddress");
    } else {
      this.set("tokenAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get startTime(): BigInt {
    let value = this.get("startTime");
    return value!.toBigInt();
  }

  set startTime(value: BigInt) {
    this.set("startTime", Value.fromBigInt(value));
  }

  get stopTime(): BigInt {
    let value = this.get("stopTime");
    return value!.toBigInt();
  }

  set stopTime(value: BigInt) {
    this.set("stopTime", Value.fromBigInt(value));
  }

  get erc721Address(): string | null {
    let value = this.get("erc721Address");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set erc721Address(value: string | null) {
    if (!value) {
      this.unset("erc721Address");
    } else {
      this.set("erc721Address", Value.fromString(<string>value));
    }
  }
}

export class ClaimedAllEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
    this.set("streamId", Value.fromBigInt(BigInt.zero()));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ClaimedAllEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ClaimedAllEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ClaimedAllEntity", id.toString(), this);
    }
  }

  static load(id: string): ClaimedAllEntity | null {
    return changetype<ClaimedAllEntity | null>(
      store.get("ClaimedAllEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get streamId(): BigInt {
    let value = this.get("streamId");
    return value!.toBigInt();
  }

  set streamId(value: BigInt) {
    this.set("streamId", Value.fromBigInt(value));
  }

  get recipient(): string | null {
    let value = this.get("recipient");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set recipient(value: string | null) {
    if (!value) {
      this.unset("recipient");
    } else {
      this.set("recipient", Value.fromString(<string>value));
    }
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class ClaimedByTokenIdEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
    this.set("streamId", Value.fromBigInt(BigInt.zero()));
    this.set("tokenId", Value.fromBigInt(BigInt.zero()));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ClaimedByTokenIdEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ClaimedByTokenIdEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ClaimedByTokenIdEntity", id.toString(), this);
    }
  }

  static load(id: string): ClaimedByTokenIdEntity | null {
    return changetype<ClaimedByTokenIdEntity | null>(
      store.get("ClaimedByTokenIdEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get streamId(): BigInt {
    let value = this.get("streamId");
    return value!.toBigInt();
  }

  set streamId(value: BigInt) {
    this.set("streamId", Value.fromBigInt(value));
  }

  get recipient(): string | null {
    let value = this.get("recipient");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set recipient(value: string | null) {
    if (!value) {
      this.unset("recipient");
    } else {
      this.set("recipient", Value.fromString(<string>value));
    }
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class SenderWithdrawedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
    this.set("streamId", Value.fromBigInt(BigInt.zero()));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save SenderWithdrawedEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save SenderWithdrawedEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("SenderWithdrawedEntity", id.toString(), this);
    }
  }

  static load(id: string): SenderWithdrawedEntity | null {
    return changetype<SenderWithdrawedEntity | null>(
      store.get("SenderWithdrawedEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get streamId(): BigInt {
    let value = this.get("streamId");
    return value!.toBigInt();
  }

  set streamId(value: BigInt) {
    this.set("streamId", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}
